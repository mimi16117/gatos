
# --- REQUERIMIENTO 2 & 8: Configuraci√≥n de la P√°gina de Inicio (Icono y T√≠tulo) ---
st.set_page_config(
    page_title="Gol-Ego: El √Årbitro Virtual de Handball",
    page_icon="./assets/logo_golego.png",
    layout="wide"
)

# --- REQUERIMIENTO 3: Ruta a la Imagen del Logo ---
LOGO_PATH = "./assets/logo_golego.png"

# ------------------------------------------------------------------------------
# --- SECCI√ìN HOME PAGE (REQUERIMIENTO 1 & 6) ---
# ------------------------------------------------------------------------------

st.image(LOGO_PATH, width=150)
st.title("‚öΩ GOL-EGO: Tu Gu√≠a R√°pida de Reglas de Handball")
st.markdown("---")


## A. Problema a Resolver (REQUERIMIENTO 1.a)
st.header("1. El Problema: Confusi√≥n en la Cancha ü§Ø")
st.write("""
El balonmano (handball) es un deporte r√°pido y din√°mico, pero sus reglas espec√≠ficas 
(como el l√≠mite de pasos, el tiempo de posesi√≥n y las sanciones) a menudo confunden 
a jugadores novatos, padres, entrenadores en formaci√≥n y √°rbitros principiantes. 
Una decisi√≥n equivocada puede cambiar el curso de un partido y generar frustraci√≥n.
**Necesitamos una referencia r√°pida e interactiva, ¬°no un manual de 300 p√°ginas!**
""")

st.markdown("---")

## B. Usuario Objetivo (REQUERIMIENTO 1.b)
st.header("2. Nuestro Usuario: El Novato Entusiasta üßë‚Äçüéì")
st.subheader("Perfil: Juan, el Futuro √Årbitro")
st.write("""
- **Edad:** 16 a√±os.
- **Ubicaci√≥n:** Estudiante de educaci√≥n f√≠sica que reci√©n comienza a arbitrar partidos de ligas escolares.
- **Estilo de Vida:** Activo, siempre con su tel√©fono para revisar informaci√≥n deportiva.
- **Problema:** En el calor del juego, olvida la se√±al de arbitraje correcta o duda si la falta amerita un 'Golpe Franco' o una 'Exclusi√≥n'.
""")

st.markdown("---")

## C. Soluci√≥n de la Aplicaci√≥n (REQUERIMIENTO 1.c)
st.header("3. La Soluci√≥n: Gol-Ego al Rescate üöÄ")
st.write("""
**Gol-Ego** es una aplicaci√≥n web intuitiva desarrollada en Python y Streamlit que sirve 
como un **√°rbitro virtual de bolsillo**. Permite al usuario simular situaciones de juego 
mediante entradas sencillas (sliders y men√∫s) y devuelve instant√°neamente la decisi√≥n 
reglamentaria y la se√±al de arbitraje visual correcta.

*¬°Nunca m√°s dudar√°s de la regla de los 3 pasos!*
""")



3. pages/1_Simulador_Arbitral.py (App Principal)
Esta es la secci√≥n interactiva central (Requerimiento 4).
Python
import streamlit as st

# --- REQUERIMIENTO 8: Widgets y L√≥gica Principal ---

st.title("ü§æ‚Äç‚ôÇÔ∏è Simulador de Decisi√≥n Arbitral")
st.subheader("Ingresa la situaci√≥n y Gol-Ego te da la decisi√≥n.")

# ----------------- Datos de Sanciones y Se√±ales (REQUERIMIENTO 3) -----------------
# Diccionario para mapear la decisi√≥n a la imagen de la se√±al
SE√ëALES = {
    "Golpe Franco": "./assets/senial_golpefranco.png",
    "Exclusi√≥n (2 min)": "./assets/senial_exclusion.png",
    "Lanzamiento de 7 metros": "./assets/senial_7metros.png",
    "Continuar Juego": "./assets/logo_golego.png" # Usamos el logo para 'continuar'
}

# ----------------- ENTRADAS DEL USUARIO (WIDGETS) -----------------

with st.sidebar:
    st.header("Opciones de Simulaci√≥n")
    
    # Widget 1: Selectbox para la Categor√≠a de la Falta
    tipo_falta = st.selectbox(
        "Categor√≠a de la Falta",
        ["Pasos Ilegales", "Bote Ilegal", "√Årea de 6 metros", "Falta Agresiva"]
    )

st.markdown("---")

# ----------------- L√ìGICA DE LA APLICACI√ìN (REQUERIMIENTO 4) -----------------

decision = None
regla = None
senial_clave = None

if tipo_falta == "Pasos Ilegales":
    # Widget 2: Slider para el n√∫mero de pasos
    num_pasos = st.slider("¬øCu√°ntos pasos dio el jugador con el bal√≥n en la mano?", 1, 6, 3)
    
    if num_pasos > 3:
        decision = "FALTA: Pasos Ilegales."
        regla = "El reglamento solo permite un m√°ximo de 3 pasos antes o despu√©s de botar."
        senial_clave = "Golpe Franco"
    else:
        decision = "Juego V√°lido."
        regla = "El jugador dio 3 o menos pasos. La jugada puede continuar."
        senial_clave = "Continuar Juego"
        
elif tipo_falta == "Bote Ilegal":
    # Widget 3: Checkbox
    rebote = st.checkbox("¬øEl jugador realiz√≥ un doble bote (bot√≥, agarr√≥ con dos manos y volvi√≥ a botar)?")
    
    if rebote:
        decision = "FALTA: Doble Bote Ilegal."
        regla = "Una vez que el jugador detiene el bote agarrando el bal√≥n con ambas manos, no puede volver a botar. Debe pasar o lanzar."
        senial_clave = "Golpe Franco"
    else:
        decision = "Juego V√°lido."
        regla = "El bote fue reglamentario."
        senial_clave = "Continuar Juego"

elif tipo_falta == "√Årea de 6 metros":
    # Widget 4: Radio para la ubicaci√≥n de la falta
    ubicacion = st.radio(
        "¬øD√≥nde pis√≥ el atacante?",
        ["Fuera del √°rea (v√°lido)", "L√≠nea del √°rea (v√°lido)", "Dentro del √°rea (invasi√≥n)"]
    )
    
    if ubicacion == "Dentro del √°rea (invasi√≥n)":
        decision = "FALTA: Invasi√≥n del √Årea de Porter√≠a."
        regla = "Un jugador de campo no puede pisar el √°rea de 6 metros. El portero es el √∫nico autorizado."
        senial_clave = "Golpe Franco"
    else:
        decision = "Juego V√°lido."
        regla = "Es v√°lido pisar la l√≠nea del √°rea (considerado fuera) o no pisarla."
        senial_clave = "Continuar Juego"

elif tipo_falta == "Falta Agresiva":
    # Widget 5: Selectbox para el nivel de agresi√≥n
    agresion = st.selectbox(
        "Nivel de Contacto",
        ["Forcejeo normal", "Sujeci√≥n/Empuj√≥n repetitivo", "Contacto directo a la cabeza/cuello"]
    )
    
    if agresion == "Contacto directo a la cabeza/cuello":
        decision = "SANCI√ìN GRAVE: Exclusi√≥n."
        regla = "Todo contacto con riesgo de lesi√≥n o falta intencional requiere al menos dos minutos de exclusi√≥n."
        senial_clave = "Exclusi√≥n (2 min)"
    elif agresion == "Sujeci√≥n/Empuj√≥n repetitivo":
        decision = "SANCI√ìN LEVE: Amonestaci√≥n (Tarjeta Amarilla)."
        regla = "Se√±ala una conducta incorrecta que podr√≠a escalar."
        senial_clave = "Golpe Franco" # O se podr√≠a usar una se√±al de amonestaci√≥n si se tuviera la imagen
    else:
        decision = "Juego V√°lido."
        regla = "El forcejeo es parte del juego. No se requiere sanci√≥n."
        senial_clave = "Continuar Juego"


# ----------------- RESULTADO DE LA APLICACI√ìN -----------------

st.markdown("## üéØ Resultado y Decisi√≥n")
if decision:
    if "FALTA" in decision or "SANCI√ìN" in decision:
        st.error(f"üö® **DECISI√ìN ARBITRAL:** {decision}")
        st.info(f"**REGLA APLICADA:** {regla}")
    else:
        st.success(f"‚úÖ **DECISI√ìN ARBITRAL:** {decision}")
        st.info(f"**REGLA APLICADA:** {regla}")
        
    st.markdown("---")
    
    st.markdown(f"### Se√±al de Arbitraje: {senial_clave}")
    
    # Muestra la imagen de la se√±al correspondiente
    if senial_clave in SE√ëALES:
        st.image(SE√ëALES[senial_clave], caption=senial_clave, width=250)



4. pages/2_Reglas_y_Seniales.py (Referencia Visual)
Python
import streamlit as st

st.title("üìñ Referencia R√°pida: Cancha y Se√±ales")
st.markdown("---")

# ----------------- Reglas con Expansi√≥n y Contenido Multimedia -----------------

st.header("1. El Campo de Juego üèüÔ∏è")
st.info("Conoce las zonas clave para entender las faltas de invasi√≥n.")
st.image("./assets/cancha_handball.jpg", caption="Diagrama Oficial de la Cancha de Handball", use_column_width=True)

st.markdown("---")

st.header("2. Sanciones y Se√±ales ‚úã")
st.info("Identifica visualmente la se√±al correcta que debe hacer el √°rbitro.")

# Uso de st.expander para organizar la informaci√≥n (REQUERIMIENTO 8)
with st.expander("Se√±al de Golpe Franco"):
    st.write("""
    **¬øCu√°ndo se usa?** Es la sanci√≥n m√°s com√∫n. Se usa para faltas menores o reglas t√©cnicas no cumplidas (ej. pasos ilegales, doble bote, entrar al √°rea).
    """)
    st.image("./assets/senial_golpefranco.png", width=200, caption="Golpe Franco")

with st.expander("Se√±al de Lanzamiento de 7 Metros"):
    st.write("""
    **¬øCu√°ndo se usa?** Similar a un penal. Se sanciona cuando una clara ocasi√≥n de gol es impedida ilegalmente por la defensa o el portero.
    """)
    st.image("./assets/senial_7metros.png", width=200, caption="Lanzamiento de 7 metros")

with st.expander("Se√±al de Exclusi√≥n (2 minutos)"):
    st.write("""
    **¬øCu√°ndo se usa?** Para faltas m√°s graves, contacto ilegal repetido, o conducta antideportiva. El jugador debe abandonar el campo por 2 minutos.
    """)
    st.image("./assets/senial_exclusion.png", width=200, caption="Exclusi√≥n de 2 minutos")

# Nota: Puedes agregar videos cortos de YouTube sobre las reglas usando st.video()
# st.header("3. Video Demostrativo")
# st.video("URL_DE_UN_VIDEO_SOBRE_PASOS_ILEGALES")



5. pages/3_Contacto.py (Contacto)
Python
import streamlit as st

# ----------------- SECCI√ìN CONTACTO (REQUERIMIENTO 6) -----------------

st.title("üìû Equipo de Desarrollo y Contacto")
st.markdown("---")

st.header("Integrantes del Equipo de Gol-Ego")

st.markdown("""
| Rol | Nombre del Integrante |
| :--- | :--- |
| üßë‚Äçüíª **Developer** | [Nombre del Developer] |
| üß† **Product Manager** | [Nombre del Product Manager] |
| üëî **CEO** | [Nombre del CEO] |
""")

st.subheader("Informaci√≥n del Curso")
st.write(f"""
- **Unidad:** 4. Elaboraci√≥n de apps para dispositivos electr√≥nicos m√≥viles
- **Curso:** [Tu Curso/Asignatura]
- **Objetivo de Aprendizaje:** 5. Desarrollar aplicaciones para dispositivos m√≥viles...
""")

st.markdown("---")
st.balloons()


 